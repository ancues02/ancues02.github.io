{
    "en":
    {
        "vacancy":"Programmer, specialized in game development",
        "nav_aboutMe": "About me",
        "nav_languages": "Languages",
        "nav_skills": "Skills",
        "nav_projects": "Projects",
        "am_title": "About me",
        "am_p": "I'm a programmer specialized in game development.",
        "am_p2": "I'm from Madrid, Spain. I've a degree in Videogame Development, a 4-year programming degree at Universidad Complutense de Madrid.I've developed some projects in groups of 6-10 people so I know how to work in team. The languages that I've used the most are C++, C# and Java, but I also know Java, Python, C, Lua and Javascript.Unity is the engine that I feel more comfortable, nevertheless I also have used Unreal.I have projects for PC, Android and PS4, as well as multiplatform, multiplayer and VR. ",
        "am_p3": "Other things I like to do outside of programming are enjoying time with my friends playing videogames or going out, spending time with my cats and dog and playing floorball, a sport that I play since I was 6.",
        "lan_title": "Languages",
        "lan_spa": "Spanish - Native",
        "lan_eng": "English - B2, Independent user",
        "sk_title": "Skills",
        "sk_p": "The program languages that I've mainly used are C++ and C#, but I also used Java, Python, Javascript, LUA and C.About video game engines, I've used Unity for 4 years, and Unreal I know the basic.Some of my skill that I learn and use during my collegue time are this:",
        "sk_0": "Experience developing video games in teams of 10",
        "sk_1": "Use of GIT as a version control system",
        "sk_2": "Videogames gameplay programming",
        "sk_3": "Desing of applications based on data",
        "sk_4": "Multithread application development",
        "sk_5": "Multiplatform application development",
        "sk_6": "VR games development in Unity and Unreal",
        "sk_7": "Console and Android video games development",
        "sk_8": "Multiplayer online and local development",
        "sk_9": "Algorithms, types and structures in problem solving",
        "sk_10": "AI algorithms in video games",
        "sk_11": "Genetics and evolution algorithms",
        "sk_12": "Procedural environment generation",
        
        "pr_title": "Projects",
        
        "pr0_title": "Procedural generation of ecosystems, and evolution of living beings",
        "pr0_p": "BSC developed by a team of 6. It's the development of a tool based on data that creates an environment and creatures that adapt, interact and evolve within the biome. The project contains multiple techniques, such as terrain generation, artificial intelligence, pathfindig and evolutionary programming.The project also contains a telemetry system and data visualization and analysis tools made for the evaluation of the program.It also has a simulation in Unity where it's possible to see the different environments and creatures with their features and interactions with the environment.\nThe most remarkable is:",
        "pr0_comp0": "Continuous development using Scrum and Pivotal to reach the goals",
        "pr0_comp1": "Design and implementation of the tool's software structure",
        "pr0_comp2": "Implementation of the bases and the creature's logic behaviour itself",
        "pr0_comp3": "Design and implementation of the telemtry system and data's analysis and visualization",
        "pr0_comp4": "Use of an external environment (Unity) to show an example of tool usage",
        "pr0_source": "Source code ",
        
        "pr1_title": "FlowFree clone",
        "pr1_p": "Develop of the app Flow Free, a mobile game. It's programmed in Unity. It contains the regular levels (Intro, Manias and Rectangles)\nThe most remarkable is:",
        "pr1_comp0": "It follows a multiplatform architecture, being able to play in PC and Android",
        "pr1_comp1": "Data persistence system, with anti hack check using a hash map",
        "pr1_comp2": "Include Unity ads (banners, intersitital and rewarded)",
        "pr1_source": "Flow Free source code",

        "pr11_title": "Oh-nO clone",
        "pr11_p": "Develop of the app Oh-nO, a mobile game. It's programmed in Android Studio using Java (Swing). \nThe most remarkable is:",
        "pr11_comp0": "Development of the engine using Java Swing and multithreading",
        "pr11_comp1": "It follows a multiplatform architecture, being able to play in PC and Android",
        "pr11_comp2": "Levels are generated procedurally",
        "pr11_source": "Oh-nO source code",
        
        "pr2_title": "Video Game Engine, Pi√±a Motor",
        "pr2_p": "Game engine made from 0, developed using C++ and different technology engines.Ogre for render, Bullet for physics, FMOD for sound, CEGUI for UI; SDL Library for handle the input and LUA as scripting language.It's a based on data engine. It uses LUA files to define scenes and prefabs. Ogravity and Ogrecabezas were made using this engine\nThe most remarkable is:",
        "pr2_comp0": "Coupling of the different technology engines",
        "pr2_comp1": "Entity-Component structure within scenes",
        "pr2_comp2": "Scenes and Prefabs using LUA",
        "pr2_comp3": "Two different types of games with the engine",
        "pr2_comp4": "Scrum and Pivotal Tracker during the develop process",
        "pr2_source": "Engine source code",
        "pr2_bb": "Ogrecabezas source code",
        "pr2_cyb": "Ogravity source code",
        
        "pr3_title": "Wolfenstein 3D (1992)",
        "pr3_p": "A copy of Wolfenstein 3D (1992) maps and movement. Developed using C++ for PC and PS4.The source code only include the PC code due to a NDA.\nThe most remarkable is:",
        "pr3_comp0": "Multiplatform architecture (PC and PS4)",
        "pr3_comp1": "Multithreading architecture. Two threads (render and logic) communicating by a concurrent queue",
        "pr3_comp2": "PS4 memory and render buffer management. Using the CPU for render in PS4 and GPU in PC",
        "pr3_comp3": "Simulation of a 3D world using raycast algorithm in a 2D world<.",
        "pr3_source": "Wolfestein source code",
        
        "pr4_title": "TuteLan",
        "pr4_p": "Develop of a network system using C++ with SDL2, available only in Linux.This application is a spanish card game called Tute.When 4 users enter to the same server, then the game starts. \nThe most remarkable is:",
        "pr4_comp0": "A client-server architecture. The server handles the game state and notifies to the clients",
        "pr4_comp1": "Serialization and deserialization using TCP",
        "pr4_comp2": "Handle the conexion/desconexion of the players",
        "pr4_comp3": "The game logic implementation",
        "pr4_source": "TuteLAN source code",
        
        "pr5_title": "Fighter-Traighter",
        "pr5_p": "Fighter-Traighter is a 2D fighting game programmed with C++, using SDL2 for input and Box2D for physics. The player can play vs an AI or play a 1 vs 1 with a friend. At the beginning the player has to select the character to use during the fight.Each round starts in a training phase, where the players try to win it (two differents modes).The player who wins can choose 2 of 3 abilities. Then, each player select two abilities of all unlocked to use during the figth. And finally the fight, where each player try to beat the opponent using the attacks of the selected character and the abilities previously picked. \nThe most remarkable is:",
        "pr5_comp0": "Box2D library coupling and implementation of the physics system with it",
        "pr5_comp1": "Entity-Component and State stack architecture",
        "pr5_comp2": "Game logic programming",
        "pr5_comp3": "Input management with SDL2. Possibility to modify controls in game",
        "pr5_web": "Web page and download",
        "pr5_source": "Fighter-Traighter source code",
        
        "pr6_title": "Nakhevari",
        "pr6_p": "This project is developed with Javascript and Phaser framework. It's a 2D platform game. The goal in Nakhevari is get the maximum score, so the player has to reach the bottom of the level as soon as possible, dodging the obstacles, killing the enemies and get the coins. The level is divided by a wall in the middle and the player has to decide in which side stay to reach the bottom.\nThe most remarkable is:",
        "pr6_comp0": "Game logic develop in Javascript",
        "pr6_comp1": "Audio, Input and Scene management",
        "pr6_comp2": "Basic AI enemies",
        "pr6_play": "Play web",
        "pr6_source": "Nakhevari source code"
    },
    "spa":
    {
        "vacancy":"Programmer, specialized in game development",
        "nav_aboutMe": "About me",
        "nav_languages": "Languages",
        "nav_skills": "Skills",
        "nav_projects": "Projects",
        "am_title": "About me",
        "am_p": "I'm a programmer specialized in game development.",
        "am_p2": "I'm from Madrid, Spain. I've a degree in Videogame Development, a 4-year programming degree at Universidad Complutense de Madrid.I've developed some projects in groups of 6-10 people so I know how to work in team. The languages that I've used the most are C++, C# and Java, but I also know Java, Python, C, Lua and Javascript.Unity is the engine that I feel more comfortable, nevertheless I also have used Unreal.I have projects for PC, Android and PS4, as well as multiplatform, multiplayer and VR. ",
        "am_p3": "Other things I like to do outside of programming are enjoying time with my friends playing videogames or going out, spending time with my cats and dog and playing floorball, a sport that I play since I was 6.",
        "lan_title": "Languages",
        "lan_spa": "Spanish - Native",
        "lan_eng": "English - B2, Independent user",
        "sk_title": "Skills",
        "sk_p": "The program languages that I've mainly used are C++ and C#, but I also used Java, Python, Javascript, LUA and C.About video game engines, I've used Unity for 4 years, and Unreal I know the basic.Some of my skill that I learn and use during my collegue time are this:",
        "sk_0": "Experience developing video games in teams of 10",
        "sk_1": "Use of GIT as a version control system",
        "sk_2": "Videogames gameplay programming",
        "sk_3": "Desing of applications based on data",
        "sk_4": "Multithread application development",
        "sk_5": "Multiplatform application development",
        "sk_6": "VR games development in Unity and Unreal",
        "sk_7": "Console and Android video games development",
        "sk_8": "Multiplayer online and local development",
        "sk_9": "Algorithms, types and structures in problem solving",
        "sk_10": "AI algorithms in video games",
        "sk_11": "Genetics and evolution algorithms",
        "sk_12": "Procedural environment generation",
        
        "pr_title": "Projects",
        
        "pr0_title": "Procedural generation of ecosystems, and evolution of living beings",
        "pr0_p": "BSC developed by a team of 6. It's the development of a tool based on data that creates an environment and creatures that adapt, interact and evolve within the biome. The project contains multiple techniques, such as terrain generation, artificial intelligence, pathfindig and evolutionary programming.The project also contains a telemetry system and data visualization and analysis tools made for the evaluation of the program.It also has a simulation in Unity where it's possible to see the different environments and creatures with their features and interactions with the environment.\nThe most remarkable is:",
        "pr0_comp0": "Continuous development using Scrum and Pivotal to reach the goals",
        "pr0_comp1": "Design and implementation of the tool's software structure",
        "pr0_comp2": "Implementation of the bases and the creature's logic behaviour itself",
        "pr0_comp3": "Design and implementation of the telemtry system and data's analysis and visualization",
        "pr0_comp4": "Use of an external environment (Unity) to show an example of tool usage",
        "pr0_source": "Source code ",
        
        "pr1_title": "FlowFree clone",
        "pr1_p": "Develop of the app Flow Free, a mobile game. It's programmed in Unity. It contains the regular levels (Intro, Manias and Rectangles)\nThe most remarkable is:",
        "pr1_comp0": "It follows a multiplatform architecture, being able to play in PC and Android",
        "pr1_comp1": "Data persistence system, with anti hack check using a hash map",
        "pr1_comp2": "Include Unity ads (banners, intersitital and rewarded)",
        "pr1_source": "Flow Free source code",

        "pr11_title": "Oh-nO clone",
        "pr11_p": "Develop of the app Oh-nO, a mobile game. It's programmed in Android Studio using Java (Swing). \nThe most remarkable is:",
        "pr11_comp0": "Development of the engine using Java Swing and multithreading",
        "pr11_comp1": "It follows a multiplatform architecture, being able to play in PC and Android",
        "pr11_comp2": "Levels are generated procedurally",
        "pr11_source": "Oh-nO source code",
        
        "pr2_title": "Video Game Engine, Pi√±a Motor",
        "pr2_p": "Game engine made from 0, developed using C++ and different technology engines.Ogre for render, Bullet for physics, FMOD for sound, CEGUI for UI; SDL Library for handle the input and LUA as scripting language.It's a based on data engine. It uses LUA files to define scenes and prefabs. Ogravity and Ogrecabezas were made using this engine\nThe most remarkable is:",
        "pr2_comp0": "Coupling of the different technology engines",
        "pr2_comp1": "Entity-Component structure within scenes",
        "pr2_comp2": "Scenes and Prefabs using LUA",
        "pr2_comp3": "Two different types of games with the engine",
        "pr2_comp4": "Scrum and Pivotal Tracker during the develop process",
        "pr2_source": "Engine source code",
        "pr2_bb": "Ogrecabezas source code",
        "pr2_cyb": "Ogravity source code",
        
        "pr3_title": "Wolfenstein 3D (1992)",
        "pr3_p": "A copy of Wolfenstein 3D (1992) maps and movement. Developed using C++ for PC and PS4.The source code only include the PC code due to a NDA.\nThe most remarkable is:",
        "pr3_comp0": "Multiplatform architecture (PC and PS4)",
        "pr3_comp1": "Multithreading architecture. Two threads (render and logic) communicating by a concurrent queue",
        "pr3_comp2": "PS4 memory and render buffer management. Using the CPU for render in PS4 and GPU in PC",
        "pr3_comp3": "Simulation of a 3D world using raycast algorithm in a 2D world<.",
        "pr3_source": "Wolfestein source code",
        
        "pr4_title": "TuteLan",
        "pr4_p": "Develop of a network system using C++ with SDL2, available only in Linux.This application is a spanish card game called Tute.When 4 users enter to the same server, then the game starts. \nThe most remarkable is:",
        "pr4_comp0": "A client-server architecture. The server handles the game state and notifies to the clients",
        "pr4_comp1": "Serialization and deserialization using TCP",
        "pr4_comp2": "Handle the conexion/desconexion of the players",
        "pr4_comp3": "The game logic implementation",
        "pr4_source": "TuteLAN source code",
        
        "pr5_title": "Fighter-Traighter",
        "pr5_p": "Fighter-Traighter is a 2D fighting game programmed with C++, using SDL2 for input and Box2D for physics. The player can play vs an AI or play a 1 vs 1 with a friend. At the beginning the player has to select the character to use during the fight.Each round starts in a training phase, where the players try to win it (two differents modes).The player who wins can choose 2 of 3 abilities. Then, each player select two abilities of all unlocked to use during the figth. And finally the fight, where each player try to beat the opponent using the attacks of the selected character and the abilities previously picked. \nThe most remarkable is:",
        "pr5_comp0": "Box2D library coupling and implementation of the physics system with it",
        "pr5_comp1": "Entity-Component and State stack architecture",
        "pr5_comp2": "Game logic programming",
        "pr5_comp3": "Input management with SDL2. Possibility to modify controls in game",
        "pr5_web": "Web page and download",
        "pr5_source": "Fighter-Traighter source code",
        
        "pr6_title": "Nakhevari",
        "pr6_p": "This project is developed with Javascript and Phaser framework. It's a 2D platform game. The goal in Nakhevari is get the maximum score, so the player has to reach the bottom of the level as soon as possible, dodging the obstacles, killing the enemies and get the coins. The level is divided by a wall in the middle and the player has to decide in which side stay to reach the bottom.\nThe most remarkable is:",
        "pr6_comp0": "Game logic develop in Javascript",
        "pr6_comp1": "Audio, Input and Scene management",
        "pr6_comp2": "Basic AI enemies",
        "pr6_play": "Play web",
        "pr6_source": "Nakhevari source code"
    }
}