{
    "en": {
      "vacancy": "Programmer, specialized in game development",
      "nav_aboutMe": "About me",
      "nav_languages": "Languages",
      "nav_skills": "Skills",
      "nav_projects": "Projects",
      "am_title": "About me",
      "am_p": "I am a programmer specialized in game development.",
      "am_p2": "I am from Madrid, Spain. I have a degree in Videogame Development, a 4-year programming degree at Universidad Complutense de Madrid. I have developed projects in groups of 6-10 people so I have learned how to work as a team. The languages that I've worked with the most are C++, C# and Java. I also know Python, C, Lua and JavaScript. Unity is the engine that I have more experience with. I have also used Unreal. I have developed projects for PC, Android and PS4, as well as multiplatform, multiplayer and VR. ",
      "lan_title": "Languages",
      "lan_spa": "Spanish -> Native",
      "lan_eng": "English -> B2",
      "sk_title": "Skills",
      "sk_p": "The programming languages that I have mainly used are C++ and C#, but I also used Java, Python, JavaScript, LUA and C. About video game engines, I have used Unity for 4 years, and Unreal I know the basic. Some of my skilld that I learned and used during my college time are this:",
      "sk_0": "Experience developing video games in large groups",
      "sk_1": "Use of GIT as a version control system",
      "sk_2": "Videogames gameplay programming",
      "sk_3": "Desing of applications based on data",
      "sk_4": "Multithread application development",
      "sk_5": "Multiplatform application development",
      "sk_6": "VR games development in Unity and Unreal",
      "sk_7": "Console and Android video games development",
      "sk_8": "Multiplayer online and local development",
      "sk_9": "Algorithms, types and structures in problem solving",
      "sk_10": "AI algorithms in video games",
      "sk_11": "Genetics and evolution algorithms",
      "sk_12": "Procedural environment generation",
  
      "pr_title": "Projects",
  
      "pr0_title": "Procedural generation of ecosystems, and evolution of living beings",
      "pr0_p": "BSC developed by a team of 6, chosen as the best BSC presented at the Spanish Videogame Congress. It is the development of a tool based on data that creates an environment and creatures that adapt, interact and evolve within the biome. The project contains multiple techniques, such as terrain generation, artificial intelligence, pathfindig and evolutionary programming. The project also contains a telemetry system and data visualization and analysis tools made for the evaluation of the program. It also has a simulation in Unity where it is possible to see the different environments and creatures with their features and interactions with the environment. \nThe most remarkable achievements are",
      "pr0_comp0": "Continuous development using Scrum and Pivotal to reach the desired goals",
      "pr0_comp1": "Design and implementation of the tool's software structure",
      "pr0_comp2": "Implementation of the bases and the creature's logic behaviour",
      "pr0_comp3": "Design and implementation of the telemetry system and data's analysis and visualization",
      "pr0_comp4": "Use of an external environment (Unity) to show an example of tool usage",
      "pr0_source": "Source code ",
  
      "pr1_title": "FlowFree clone",
      "pr1_p": "Development of the mobile app Flow Free. It is programmed in Unity. It contains the regular levels (Intro, Manias and Rectangles). \nThe most remarkable achievements are:",
      "pr1_comp0": "It is playable both in PC and Android",
      "pr1_comp1": "Follows a structure that allows to add content without losing progress",
      "pr1_comp2": "Data persistence system, with anti hack check using a hash map",
      "pr1_comp3": "Include Unity ads (banners, interstitial and rewarded)",
      "pr1_source": "Flow Free source code",
  
      "pr11_title": "Oh-nO clone",
      "pr11_p": "Development of the app Oh-nO, a mobile game. It is programmed in Android Studio using Java (Swing). \nThe most remarkable achievements are",
      "pr11_comp0": "Development of the engine using Java Swing and multithreading",
      "pr11_comp1": "It follows a multiplatform architecture, being able to play in PC and Android",
      "pr11_comp2": "Levels are generated procedurally",
      "pr11_source": "Oh-nO source code",
  
      "pr2_title": "Video Game Engine, Piña Motor",
      "pr2_p": "Game engine made from 0 in a team of 6 people, developed using C++ and different technology engines. Ogre for render, Bullet for physics, FMOD for sound, CEGUI for UI, SDL Library for handling the input and LUA as scripting language. It is a data-based engine. Ogravity and Ogrecabezas were made using this engine. \nThe most remarkable achievements are",
      "pr2_comp0": "Coupling of the different technology engines",
      "pr2_comp1": "Entity-Component structure within scenes",
      "pr2_comp2": "Scenes and Prefabs using LUA",
      "pr2_comp3": "Two different types of games within the engine",
      "pr2_comp4": "Scrum and Pivotal Tracker during the development process",
      "pr2_source": "Engine source code",
      "pr2_bb": "Ogrecabezas source code",
      "pr2_cyb": "Ogravity source code",
  
      "pr3_title": "Wolfenstein 3D (1992)",
      "pr3_p": "A copy of Wolfenstein 3D (1992) maps and movement. Developed using C++ for PC and PS4. The source code only includes the PC code due to a NDA. \nThe most remarkable achievements are",
      "pr3_comp0": "Multiplatform architecture (PC and PS4)",
      "pr3_comp1": "Multithreading architecture. Two threads (render and logic) communicating through a concurrent queue",
      "pr3_comp2": "PS4 memory and render buffer management. Using the CPU for render in PS4 and GPU in PC",
      "pr3_comp3": "Simulation of a 3D world using raycast algorithm in a 2D world",
      "pr3_source": "Wolfestein source code",
  
      "pr4_title": "TuteLan",
      "pr4_p": "Development of a network system using C++ with SDL2, available only in Linux. This application is based on a spanish card game called Tute. When 4 users enter to the same server the game starts. \nThe most remarkable achievements are",
      "pr4_comp0": "A client-server architecture. The server handles the game state and notifies the clients",
      "pr4_comp1": "Serialization and deserialization using TCP",
      "pr4_comp2": "Handling of the connection/disconnection of the players",
      "pr4_comp3": "Implementation of the game logic ",
      "pr4_source": "TuteLAN source code",
  
      "pr5_title": "Fighter-Traighter",
      "pr5_p": "Fighter-Traighter is a 2D fighting game programmed with C++, using SDL2 for input and Box2D for physics. The player can play against an AI or play a 1 vs 1 with a friend. At the beginning the player selects the character to use during the fight. Each round starts in a training phase where the players try to win in two differents modes. The winner can choose between 2 of 3 abilities. Then, each player selects two abilities of all of the unlocked skills to use during the fight. Finally each player tries to beat the opponent using the attacks of the selected character and the previously picked abilities. \nThe most remarkable achievements are",
      "pr5_comp0": "Box2D library coupling and implementation of the physics system within it",
      "pr5_comp1": "Entity-Component and State stack architecture",
      "pr5_comp2": "Game logic programming",
      "pr5_comp3": "Input management with SDL2. Possibility to modify controls in game",
      "pr5_web": "Web page and download",
      "pr5_source": "Fighter-Traighter source code",
  
      "pr6_title": "Nakhevari",
      "pr6_p": "This project is developed with JavaScript and Phaser framework. It is a 2D platform game. The goal in Nakhevari is get the maximum score, so the player has to reach the bottom of the level as soon as possible, dodging the obstacles, killing the enemies and getting the coins. The level is divided by a wall in the middle and the player has to decide in which side stay to reach the bottom. \nThe most remarkable achievements are",
      "pr6_comp0": "Game logic developed in JavaScript",
      "pr6_comp1": "Audio, Input and Scene management",
      "pr6_comp2": "Basic AI enemies",
      "pr6_play": "Play web",
      "pr6_source": "Nakhevari source code",
  
      "spa_button": "Spanish",
      "en_button": "English"
    },
    "spa":
    {
        "vacancy":"Programador, especializado en desarrollo de videojuegos",
        "nav_aboutMe": "Sobre mí",
        "nav_languages": "Lenguajes",
        "nav_skills": "Aptitudes",
        "nav_projects": "Proyectos",
        "am_title": "Sobre mí",
        "am_p": "Soy un programador especializado en desarrollo de videojuegos",
        "am_p2": "Vivo en Madrid, España. Tengo el grado de desarrollo de videojuegos, un grado de 4 años en la Universidad Complutense de Madrid. He desarrollado proyectos en grupos de 6-10 personas, por lo que se como es trabajar en un equipo grande. Los lenguajes que mejor manejo son C++, C# y Java, aunque también conozco Java, Python, C, Lua y JavaScript. El motor de videojuegos que más he usado es Unity y después Unreal. Tengo proyectos para PC, Android y consola, además de multiplataforma, multijugador y RV.",
        "lan_title": "Idiomas",
        "lan_spa": "Español -> Nativo",
        "lan_eng": "Inglés -> B2",
        "sk_title": "Aptitudes",
        "sk_p": "Los lenguajes de programación que más he usado son C++, C# y Java, aunque también he usado Python, C, Lua y JavaScript. Sobre motores de videojuegos Unity lo he usado durante los últimos 4 años, y Unreal solo para algun proyecto más básico. Algunas de mis aptitudes que he desarrollado durante la carerra son las siguientes: ",
        "sk_0": "Experiencia en proyectos de 10 personas",
        "sk_1": "Uso de GIT como sistema de control de versiones",
        "sk_2": "Programación de videojuegos",
        "sk_3": "Diseño de aplicaciones basadas en datos",
        "sk_4": "Desarrollo de aplicaciones multi-hilo",
        "sk_5": "Desarrollo de aplicaciones multiplataforma",
        "sk_6": "Desarrollados proyectos en RV para Unity y Unreal ",
        "sk_7": "Desarrollo de juegos en Consola y Android",
        "sk_8": "Desarrollo multijugador online y local",
        "sk_9": "Algoritmos, tipos y estructuras en resolucion de problemas",
        "sk_10": "Algoritmos de IA aplicados en videojuegos",
        "sk_11": "Algoritmos genéticos y evolutivos",
        "sk_12": "Generación procedimental de entornos",
        
        "pr_title": "Proyectos",
        
        "pr0_title": "Generación procedimental de ecosistemas, y evolución de criaturas",
        "pr0_p": "TFG desarrollado entre 6 personas, elegido como el mejor TFG/máster presentado en el Congreso Español de Videojuegos. Es una herramienta basada en datos que genera un entorno y unas criaturas que se adaptan e interactúan con el terreno y evolucionan con el paso del tiempo. El proyecto incluye multiples técnicas como la generación procedimental de terreno y cromosomas, inteligencia artificial, búsqueda de caminos y programación evolutiva. También contiene un sistema de telemetría y visualización y análisis de datos con el que se ha evaluado el proyecto. También hay un ejemplo de uso en Unity de los datos generados durante la simulación (terreno y criaturas evolucionadas) además de la posibilidad de ver la simulación gráficamente. \nLo más remarcable es:",
        "pr0_comp0": "Desarrollo continuo durante 6 meses, utilizando Scrum y Pivotal Tracker para alcanzar las metas deseadas",
        "pr0_comp1": "Diseño e implementación de la estructura software del programa",
        "pr0_comp2": "Implementación de las bases y la lógica del comportamiento de las criaturas",
        "pr0_comp3": "Diseño y desarrollo del sistema de telemetría y el análisis y visualización de los datos",
        "pr0_comp4": "Uso de un entorno externo (Unity) como muestra de uso de la herramienta",
        "pr0_source": "Enlace al respositorio ",
        
        "pr1_title": "Clon de FlowFree",
        "pr1_p": "Desarrollo de la aplicación Flow Free, un juego de móvil. Está programado en Unity y contiene los niveles iniciales (Intro, Manías y Rectángulos). \nLo más remarcable es:",
        "pr1_comp0": "Se puede jugar tanto en Android como en PC",
        "pr1_comp1": "Sistema de persistencia de datos, con comprobración anti hack usando una tabla hash",
        "pr1_comp2": "Sigue una estructura que permite añadir contenido fácilmente sin perder el progreso",
        "pr1_comp3": "Incluye el sistema de anuncios proporcionado por Unity (banners, interstitial y rewarded)",
        "pr1_source": "Enlace al respositorio de Flow Free",

        "pr11_title": "Clon de Oh-nO",
        "pr11_p": "Desarrollo de la aplicación Oh-nO. Está programado en Android Studio con Java (Swing). \nLo más remarcable es:",
        "pr11_comp0": "Desarrollo del motor usando Java Swing y multi-hilos",
        "pr11_comp1": "Sigue una arquitectura que permite jugar tanto en PC como Android",
        "pr11_comp2": "Los niveles se generan procedimentalmente",
        "pr11_source": "Enlace al respositorio de Oh-nO ",
        
        "pr2_title": "Motor de Videojuegos, Piña Motor",
        "pr2_p": "Motor de videojuegos hecho desde 0 en equipo de 10 personas, desarrollado usando C++ y diferentes motores de tecnología. Ogre para renderizar, Bullet para físicas, FMOD para sonido, CEGUI para UI, la librería SDL para el input y LUA como lenguaje de scripting. Es un motor basado en datos. Ogravity y Ogrecabezas son dos juegos desarrollados con este motor. \nLo más remarcable es:",
        "pr2_comp0": "Acoplamiento de los diferentes motores de tecnología",
        "pr2_comp1": "Estructura siguiendo el patrón Entidad-Componente",
        "pr2_comp2": "Escenas y prefabs usando LUA",
        "pr2_comp3": "Desarrollo de dos juegos diferentes con el motor",
        "pr2_comp4": "Scrum y Pivotal Tracker durante el proceso de desarrollo",
        "pr2_source": "Enlace al respositorio del Piña Motor",
        "pr2_bb": "Enlace al respositorio de Ogrecabezas",
        "pr2_cyb": "Enlace al respositorio de Ogravity",
        
        "pr3_title": "Wolfenstein 3D (1992)",
        "pr3_p": "Copia de los mapas y movimiento de Wolfenstein 3D (1992). Desarrollado usando C++, funciona tanto para PC como PS4. El código fuente solo incluye la parte de PC debido al NDA. \nLo más remarcable es:",
        "pr3_comp0": "Sigue una arquitectura que permite multiplataforma (PC and PS4)",
        "pr3_comp1": "Arquitectura multi-hilo. Dos hilos (render y lógica) que se comunican a través de una cola concurrente",
        "pr3_comp2": "Programación de bajo nivel en PS4. Manejo del render buffer y la memoría en PS4.",
        "pr3_comp3": "Simulación de un mundo 3D utilizando el algoritmo del raycast en un mundo 2D.",
        "pr3_source": "Enlace al respositorio de Wolfestein",
        
        "pr4_title": "TuteLan",
        "pr4_p": "Desarrallo de un sistema de red usando C++ y SDL2, funciona solo en Linux. La aplicación es el Tute, un juego de cartas español. Una vez que han entrado a la misma sala 4 jugadores la partida empieza. \nLo más remarcable es:",
        "pr4_comp0": "Sigue una arquitectura cliente-servidor donde el cliente tiene el estado de la partida, la lógica del juego y avisa a los clientes",
        "pr4_comp1": "Serialización y deserialización usando TCP",
        "pr4_comp2": "Gestión de la conexión/desconexión de los jugadores",
        "pr4_comp3": "Implementación de la lógica del juego",
        "pr4_source": "Enlace al respositorio de TuteLAN",
        
        "pr5_title": "Fighter-Traighter",
        "pr5_p": "Fighter-Traighter es un juego de peleas en 2D programado en C++ con SDL2 para el input y Box2D para las físicas. Se puede jugar contra la IA o contra otro jugador en modo local. Al principio el jugador selecciona el personaje a usar. Después está la fase de entrenamiento (dos minijuegos distintos) y quien la gane elige 2 de 3 habilidades. Lo siguiente es la selección de habilidades de entre las desbloqueadas para el combate y por último el combate en sí. \nLo más remarcable es:",
        "pr5_comp0": "Acomplamiento de la librería Box2D y el uso del sistema de físicas",
        "pr5_comp1": "Arquitectura del software siguiendo el patrón Entidad-Componente y la cola de estados",
        "pr5_comp2": "La programación de la lógica del juego",
        "pr5_comp3": "La gestión de la entrada con SDL2 y la posibilidad de cambiar de controles",
        "pr5_web": "Página web y descarga",
        "pr5_source": "Enlace al respositorio de Fighter-Traighter",
        
        "pr6_title": "Nakhevari",
        "pr6_p": "Este proyecto está hecho con JavaScript y el framework Phaser. Es un juego plataformas 2D donde el objetivo es que el jugador consiga la mayor puntuación posible. Para ello tiene que llegar al fondo del nivel lo más rápido posible, consiguiendo monedas y matando enemigos. EL nivel se divide en 2 por un muro vertical en medio, teniendo que decidir el jugador si cambiar o no de pantalla para esquivar obstáculos. \nLo más remarcable es:",
        "pr6_comp0": "Implementación de la lógica del juego en Javascript",
        "pr6_comp1": "La gestión del audio, entrada y escenas",
        "pr6_comp2": "IA básica de los enemigos",
        "pr6_play": "Web para jugar",
        "pr6_source": "Enlace al respositorio de Nakhevari",

        "spa_button": "Español",
        "en_button": "Inglés"

    }
}